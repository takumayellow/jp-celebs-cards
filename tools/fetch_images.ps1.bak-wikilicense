Param(
  [string]$CardsTsv = "..\data\cards.tsv",
  [string]$ImagesDir = "..\images",
  [string]$AttrCsv = "..\data\attributions.csv"
)
$ErrorActionPreference = "Stop"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

if(!(Test-Path $CardsTsv)){ throw "TSV not found: $CardsTsv" }
New-Item -ItemType Directory -Force -Path $ImagesDir | Out-Null
New-Item -ItemType Directory -Force -Path (Join-Path (Split-Path $ImagesDir) "logs") | Out-Null
$log = Join-Path (Join-Path (Split-Path $ImagesDir) "logs") "fetch.log"
"" | Out-File -Encoding UTF8 $log

function Write-Log($m){ "$((Get-Date).ToString('yyyy-MM-dd HH:mm:ss'))  $m" | Tee-Object -FilePath $log -Append | Out-Null; Write-Host $m }
function UrlEnc([string]$s){ [System.Uri]::EscapeDataString($s) }

function Get-QID([string]$name){
  $url = "https://www.wikidata.org/w/api.php?action=wbsearchentities&search=$(UrlEnc $name)&language=ja&type=item&limit=1&format=json"
  try{ $r = Invoke-RestMethod $url -TimeoutSec 20; if($r.search.Count -gt 0){ return $r.search[0].id } }catch{}
  return $null
}
function Get-P18([string]$qid){
  if(-not $qid){ return $null }
  $url = "https://www.wikidata.org/w/api.php?action=wbgetentities&ids=$qid&props=claims&format=json"
  try{ $r = Invoke-RestMethod $url -TimeoutSec 20; $p18 = $r.entities.$qid.claims.P18; if($p18){ return $p18.mainsnak.datavalue.value } }catch{}
  return $null
}
function Get-CommonsMeta([string]$filename){
  $title = "File:" + ($filename -replace ' ','_')
  $url = "https://commons.wikimedia.org/w/api.php?action=query&titles=$(UrlEnc $title)&prop=imageinfo&iiprop=url|extmetadata&format=json&iiextmetadatafilter=Artist|Credit|LicenseShortName|UsageTerms|LicenseUrl"
  try{ $r = Invoke-RestMethod $url -TimeoutSec 20; $page = $r.query.pages.PSObject.Properties.Value | Select-Object -First 1; if($page.imageinfo){ return $page.imageinfo[0] } }catch{}
  return $null
}
function Download-Commons([string]$filename,[string]$destBase){
  $safe = ($filename -replace ' ','_')
  $redir = "https://commons.wikimedia.org/wiki/Special:FilePath/$(UrlEnc $safe)"
  $tmp = [IO.Path]::GetTempFileName()
  try{
    $resp = Invoke-WebRequest -Uri $redir -MaximumRedirection 5 -TimeoutSec 60 -OutFile $tmp -PassThru -ErrorAction Stop
    $ct = $resp.Headers['Content-Type']
    $ext = if($ct -match 'jpeg'){'.jpg'} elseif($ct -match 'png'){'.png'} elseif($ct -match 'webp'){'.webp'}
           else { [IO.Path]::GetExtension($resp.BaseResponse.ResponseUri.AbsoluteUri); if(-not $ext){'.jpg'} else {$ext} }
    $dest = "$destBase$ext"; Move-Item -Force $tmp $dest; return $dest
  }catch{ if(Test-Path $tmp){ Remove-Item -Force $tmp }; return $null }
}
function Search-WikipediaTitle([string]$name){
  $url = "https://ja.wikipedia.org/w/api.php?action=query&list=search&format=json&srsearch=$(UrlEnc $name)&srlimit=1"
  try{ $r = Invoke-RestMethod $url -TimeoutSec 20; if($r.query.search.Count -gt 0){ return $r.query.search[0].title } }catch{}
  return $null
}
function Get-WikipediaThumb([string]$title){
  if(-not $title){ return $null }
  $url = "https://ja.wikipedia.org/w/api.php?action=query&prop=pageimages&format=json&pithumbsize=1000&titles=$(UrlEnc $title)"
  try{ $r = Invoke-RestMethod $url -TimeoutSec 20; $page = $r.query.pages.PSObject.Properties.Value | Select-Object -First 1; if($page.thumbnail.source){ return $page.thumbnail.source } }catch{}
  return $null
}
function Download-Url([string]$url,[string]$destBase){
  $tmp = [IO.Path]::GetTempFileName()
  try{
    $resp = Invoke-WebRequest -Uri $url -TimeoutSec 60 -OutFile $tmp -PassThru -ErrorAction Stop
    $ct = $resp.Headers['Content-Type']
    $ext = if($ct -match 'jpeg'){'.jpg'} elseif($ct -match 'png'){'.png'} elseif($ct -match 'webp'){'.webp'}
           else { [IO.Path]::GetExtension($resp.BaseResponse.ResponseUri.AbsoluteUri); if(-not $ext){'.jpg'} else {$ext} }
    $dest = "$destBase$ext"; Move-Item -Force $tmp $dest; return $dest
  }catch{ if(Test-Path $tmp){ Remove-Item -Force $tmp }; return $null }
}

$cards = Import-Csv -Path $CardsTsv -Delimiter "`t"
"id,name,source,filename,license,artist,credit" | Set-Content -Path $AttrCsv -Encoding UTF8

$i=0
foreach($c in $cards){
  $i++
  # ★ Null安全：nullなら空文字にキャスト → Trim
  $name = ([string]$c.name).Trim()
  if([string]::IsNullOrWhiteSpace($name)){ Write-Log "SKIP  [----] (空行/名前なし)"; continue }

  $id   = if([string]::IsNullOrWhiteSpace([string]$c.id)) { "{0:d4}" -f $i } else { [string]$c.id }
  $destBase = Join-Path $ImagesDir $id
  if(Get-ChildItem -LiteralPath $ImagesDir -File -ea SilentlyContinue | Where-Object { $_.BaseName -eq $id }){
    Write-Log "SKIP  [$id] $name (exists)"; continue
  }

  Write-Log "FETCH [$id] $name"

  # ① Wikidata
  $qid = Get-QID $name; Write-Log "  QID=$qid"
  if(-not $qid){
    $prefixes = @("乃木坂","櫻坂","日向坂","AKB","Perfume","SixTONES","Snow Man","なにわ男子",
                  "B'z","Official髭男dism","King Gnu","SEKAI NO OWARI","YOASOBI",
                  "サンドウィッチマン","オードリー","バナナマン","くりぃむ","千鳥","ミスチル","Mr.Children")
    foreach($p in $prefixes){
      if($name.StartsWith($p)){ $qid = Get-QID ($name.Substring($p.Length).Trim()); if($qid){ break } }
    }
  }

  if($qid){
    $p18 = Get-P18 $qid; Write-Log "  P18=$p18"
    if($p18){
      $saved = Download-Commons $p18 $destBase
      if($saved){
        $meta = Get-CommonsMeta $p18
        $lic = $meta.extmetadata.LicenseShortName.value
        $artist = ($meta.extmetadata.Artist.value -replace '<[^>]+>','')
        $credit = ($meta.extmetadata.Credit.value -replace '<[^>]+>','')
        $src = $meta.url
        "$id,$name,$src,$([IO.Path]::GetFileName($saved)),$lic,$artist,$credit" | Add-Content -Path $AttrCsv -Encoding UTF8
        Start-Sleep -Milliseconds 300
        continue
      }
    }
  }

  # ② Wikipedia（代替）
  $title = Search-WikipediaTitle $name
  $thumb = Get-WikipediaThumb $title
  if($thumb){
    $saved = Download-Url $thumb $destBase
    if($saved){
      "$id,$name,$thumb,$([IO.Path]::GetFileName($saved)),Unknown,Unknown,From Wikipedia thumbnail" | Add-Content -Path $AttrCsv -Encoding UTF8
      Start-Sleep -Milliseconds 200
      continue
    }
  }

  Write-Log "FAIL  [$id] $name"
}
Write-Log "Done."
